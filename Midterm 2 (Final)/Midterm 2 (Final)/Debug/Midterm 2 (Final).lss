
Midterm 2 (Final).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000172  00800100  00000c40  00000cd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000010d  00800272  00800272  00000e46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001605  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000995  00000000  00000000  00002591  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000084c  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00003774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053f  00000000  00000000  00003964  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b86  00000000  00000000  00003ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 37       	cpi	r26, 0x72	; 114
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a2 e7       	ldi	r26, 0x72	; 114
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 37       	cpi	r26, 0x7F	; 127
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 08 02 	call	0x410	; 0x410 <main>
  9e:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
	data[(length-1)] = i2c_read_nack();
	
	i2c_stop();
	
	return 0;
}
  a6:	88 e4       	ldi	r24, 0x48	; 72
  a8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  ac:	08 95       	ret

000000ae <i2c_start>:
  ae:	ec eb       	ldi	r30, 0xBC	; 188
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	10 82       	st	Z, r1
  b4:	94 ea       	ldi	r25, 0xA4	; 164
  b6:	90 83       	st	Z, r25
  b8:	90 81       	ld	r25, Z
  ba:	99 23       	and	r25, r25
  bc:	ec f7       	brge	.-6      	; 0xb8 <i2c_start+0xa>
  be:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	98 7f       	andi	r25, 0xF8	; 248
  c4:	98 30       	cpi	r25, 0x08	; 8
  c6:	a1 f4       	brne	.+40     	; 0xf0 <i2c_start+0x42>
  c8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d2:	ec eb       	ldi	r30, 0xBC	; 188
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 23       	and	r24, r24
  da:	ec f7       	brge	.-6      	; 0xd6 <i2c_start+0x28>
  dc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  e0:	98 7f       	andi	r25, 0xF8	; 248
  e2:	98 31       	cpi	r25, 0x18	; 24
  e4:	39 f0       	breq	.+14     	; 0xf4 <i2c_start+0x46>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 34       	cpi	r25, 0x40	; 64
  ea:	29 f4       	brne	.+10     	; 0xf6 <i2c_start+0x48>
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	08 95       	ret
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	08 95       	ret
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	08 95       	ret

000000f8 <i2c_write>:
  f8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 102:	ec eb       	ldi	r30, 0xBC	; 188
 104:	f0 e0       	ldi	r31, 0x00	; 0
 106:	80 81       	ld	r24, Z
 108:	88 23       	and	r24, r24
 10a:	ec f7       	brge	.-6      	; 0x106 <i2c_write+0xe>
 10c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 110:	98 7f       	andi	r25, 0xF8	; 248
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	98 32       	cpi	r25, 0x28	; 40
 116:	09 f4       	brne	.+2      	; 0x11a <i2c_write+0x22>
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	08 95       	ret

0000011c <i2c_read_ack>:
 11c:	84 ec       	ldi	r24, 0xC4	; 196
 11e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 122:	ec eb       	ldi	r30, 0xBC	; 188
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	88 23       	and	r24, r24
 12a:	ec f7       	brge	.-6      	; 0x126 <i2c_read_ack+0xa>
 12c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 130:	08 95       	ret

00000132 <i2c_read_nack>:
 132:	84 e8       	ldi	r24, 0x84	; 132
 134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 138:	ec eb       	ldi	r30, 0xBC	; 188
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	88 23       	and	r24, r24
 140:	ec f7       	brge	.-6      	; 0x13c <i2c_read_nack+0xa>
 142:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 146:	08 95       	ret

00000148 <i2c_writeReg>:

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ff 92       	push	r15
 14e:	0f 93       	push	r16
 150:	1f 93       	push	r17
 152:	cf 93       	push	r28
 154:	df 93       	push	r29
 156:	c6 2f       	mov	r28, r22
 158:	6a 01       	movw	r12, r20
 15a:	89 01       	movw	r16, r18
	if (i2c_start(devaddr | 0x00)) return 1;
 15c:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 160:	f8 2e       	mov	r15, r24
 162:	81 11       	cpse	r24, r1
 164:	15 c0       	rjmp	.+42     	; 0x190 <i2c_writeReg+0x48>

	i2c_write(regaddr);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	for (uint16_t i = 0; i < length; i++)
 16c:	01 15       	cp	r16, r1
 16e:	11 05       	cpc	r17, r1
 170:	59 f0       	breq	.+22     	; 0x188 <i2c_writeReg+0x40>
 172:	e6 01       	movw	r28, r12
 174:	0c 0d       	add	r16, r12
 176:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 178:	89 91       	ld	r24, Y+
 17a:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>
 17e:	81 11       	cpse	r24, r1
 180:	0a c0       	rjmp	.+20     	; 0x196 <i2c_writeReg+0x4e>
{
	if (i2c_start(devaddr | 0x00)) return 1;

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
 182:	c0 17       	cp	r28, r16
 184:	d1 07       	cpc	r29, r17
 186:	c1 f7       	brne	.-16     	; 0x178 <i2c_writeReg+0x30>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <i2c_writeReg+0x52>
	return 0;
}

uint8_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr | 0x00)) return 1;
 190:	ff 24       	eor	r15, r15
 192:	f3 94       	inc	r15
 194:	02 c0       	rjmp	.+4      	; 0x19a <i2c_writeReg+0x52>

	i2c_write(regaddr);

	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 196:	ff 24       	eor	r15, r15
 198:	f3 94       	inc	r15
	}

	i2c_stop();

	return 0;
}
 19a:	8f 2d       	mov	r24, r15
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	df 90       	pop	r13
 1a8:	cf 90       	pop	r12
 1aa:	08 95       	ret

000001ac <i2c_readReg>:

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
 1ac:	af 92       	push	r10
 1ae:	bf 92       	push	r11
 1b0:	df 92       	push	r13
 1b2:	ef 92       	push	r14
 1b4:	ff 92       	push	r15
 1b6:	0f 93       	push	r16
 1b8:	1f 93       	push	r17
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	18 2f       	mov	r17, r24
 1c0:	06 2f       	mov	r16, r22
 1c2:	5a 01       	movw	r10, r20
 1c4:	e9 01       	movw	r28, r18
	if (i2c_start(devaddr)) return 1;
 1c6:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1ca:	81 11       	cpse	r24, r1
 1cc:	22 c0       	rjmp	.+68     	; 0x212 <i2c_readReg+0x66>

	i2c_write(regaddr);
 1ce:	80 2f       	mov	r24, r16
 1d0:	0e 94 7c 00 	call	0xf8	; 0xf8 <i2c_write>

	if (i2c_start(devaddr | 0x01)) return 1;
 1d4:	81 2f       	mov	r24, r17
 1d6:	81 60       	ori	r24, 0x01	; 1
 1d8:	0e 94 57 00 	call	0xae	; 0xae <i2c_start>
 1dc:	d8 2e       	mov	r13, r24
 1de:	81 11       	cpse	r24, r1
 1e0:	1b c0       	rjmp	.+54     	; 0x218 <i2c_readReg+0x6c>

	for (uint16_t i = 0; i < (length-1); i++)
 1e2:	8e 01       	movw	r16, r28
 1e4:	01 50       	subi	r16, 0x01	; 1
 1e6:	11 09       	sbc	r17, r1
 1e8:	51 f0       	breq	.+20     	; 0x1fe <i2c_readReg+0x52>
 1ea:	e5 01       	movw	r28, r10
 1ec:	75 01       	movw	r14, r10
 1ee:	e0 0e       	add	r14, r16
 1f0:	f1 1e       	adc	r15, r17
	{
		data[i] = i2c_read_ack();
 1f2:	0e 94 8e 00 	call	0x11c	; 0x11c <i2c_read_ack>
 1f6:	89 93       	st	Y+, r24

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;

	for (uint16_t i = 0; i < (length-1); i++)
 1f8:	ec 16       	cp	r14, r28
 1fa:	fd 06       	cpc	r15, r29
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <i2c_readReg+0x46>
	{
		data[i] = i2c_read_ack();
	}
	data[(length-1)] = i2c_read_nack();
 1fe:	e5 01       	movw	r28, r10
 200:	c0 0f       	add	r28, r16
 202:	d1 1f       	adc	r29, r17
 204:	0e 94 99 00 	call	0x132	; 0x132 <i2c_read_nack>
 208:	88 83       	st	Y, r24
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 20a:	84 e9       	ldi	r24, 0x94	; 148
 20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 210:	05 c0       	rjmp	.+10     	; 0x21c <i2c_readReg+0x70>
	return 0;
}

uint8_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length)
{
	if (i2c_start(devaddr)) return 1;
 212:	dd 24       	eor	r13, r13
 214:	d3 94       	inc	r13
 216:	02 c0       	rjmp	.+4      	; 0x21c <i2c_readReg+0x70>

	i2c_write(regaddr);

	if (i2c_start(devaddr | 0x01)) return 1;
 218:	dd 24       	eor	r13, r13
 21a:	d3 94       	inc	r13
	data[(length-1)] = i2c_read_nack();

	i2c_stop();

	return 0;
}
 21c:	8d 2d       	mov	r24, r13
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	bf 90       	pop	r11
 22e:	af 90       	pop	r10
 230:	08 95       	ret

00000232 <sending_char>:
	UCSR0C = (3 << UCSZ00);	// Set frame format: 8data, 1stop bit
}

int sending_char(char info, FILE *str)
{
	while ( !( UCSR0A & ( 1 << UDRE0)) );	// Wait until buffer empty
 232:	e0 ec       	ldi	r30, 0xC0	; 192
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	95 ff       	sbrs	r25, 5
 23a:	fd cf       	rjmp	.-6      	; 0x236 <sending_char+0x4>
	
	UDR0 = info;	// Data placed into buffer
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0; 
}
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	08 95       	ret

00000246 <UART_initialization>:
		_delay_ms(1500);				// Give time of 1.5s
	}
}
void UART_initialization(void)
{
	UBRR0H = baud_rate >> 8;		// Setting the baud rate
 246:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <baud_rate+0x1>
 24a:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = baud_rate & 0xFF;		//
 24e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <baud_rate>
 252:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	
	UCSR0B = ( 1 << RXEN0) | ( 1 << TXEN0) | (1 << RXCIE0);	// Receive and transmit are enabled
 256:	88 e9       	ldi	r24, 0x98	; 152
 258:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	
	UCSR0C = (3 << UCSZ00);	// Set frame format: 8data, 1stop bit
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 262:	08 95       	ret

00000264 <Colors>:

	return 0; 
}

void Colors(uint16_t *red, uint16_t *blue, uint16_t *green)	 // Function used to read the colors for sensor (red, blue and green)
{
 264:	ef 92       	push	r14
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	7c 01       	movw	r14, r24
 272:	8b 01       	movw	r16, r22
 274:	ea 01       	movw	r28, r20
	i2c_readReg(APDS_WRITE, APDS9960_RDATAL, &red_low, 1);
 276:	21 e0       	ldi	r18, 0x01	; 1
 278:	30 e0       	ldi	r19, 0x00	; 0
 27a:	44 e7       	ldi	r20, 0x74	; 116
 27c:	53 e0       	ldi	r21, 0x03	; 3
 27e:	66 e9       	ldi	r22, 0x96	; 150
 280:	82 e7       	ldi	r24, 0x72	; 114
 282:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	i2c_readReg(APDS_WRITE, APDS9960_RDATAH, &red_high, 1);
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	43 e7       	ldi	r20, 0x73	; 115
 28c:	52 e0       	ldi	r21, 0x02	; 2
 28e:	67 e9       	ldi	r22, 0x97	; 151
 290:	82 e7       	ldi	r24, 0x72	; 114
 292:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	i2c_readReg(APDS_WRITE, APDS9960_GDATAL, &green_low, 1);
 296:	21 e0       	ldi	r18, 0x01	; 1
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	45 e7       	ldi	r20, 0x75	; 117
 29c:	53 e0       	ldi	r21, 0x03	; 3
 29e:	68 e9       	ldi	r22, 0x98	; 152
 2a0:	82 e7       	ldi	r24, 0x72	; 114
 2a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	i2c_readReg(APDS_WRITE, APDS9960_GDATAH, &green_high, 1);
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	42 e7       	ldi	r20, 0x72	; 114
 2ac:	52 e0       	ldi	r21, 0x02	; 2
 2ae:	69 e9       	ldi	r22, 0x99	; 153
 2b0:	82 e7       	ldi	r24, 0x72	; 114
 2b2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	i2c_readReg(APDS_WRITE, APDS9960_BDATAL, &blue_low, 1);
 2b6:	21 e0       	ldi	r18, 0x01	; 1
 2b8:	30 e0       	ldi	r19, 0x00	; 0
 2ba:	46 e7       	ldi	r20, 0x76	; 118
 2bc:	53 e0       	ldi	r21, 0x03	; 3
 2be:	6a e9       	ldi	r22, 0x9A	; 154
 2c0:	82 e7       	ldi	r24, 0x72	; 114
 2c2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	i2c_readReg(APDS_WRITE, APDS9960_BDATAH, &blue_high, 1);
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	47 e7       	ldi	r20, 0x77	; 119
 2cc:	53 e0       	ldi	r21, 0x03	; 3
 2ce:	6b e9       	ldi	r22, 0x9B	; 155
 2d0:	82 e7       	ldi	r24, 0x72	; 114
 2d2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	*red = red_high << 8 | red_low;
 2d6:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <red_high>
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	98 2f       	mov	r25, r24
 2de:	88 27       	eor	r24, r24
 2e0:	20 91 74 03 	lds	r18, 0x0374	; 0x800374 <red_low>
 2e4:	82 2b       	or	r24, r18
 2e6:	f7 01       	movw	r30, r14
 2e8:	91 83       	std	Z+1, r25	; 0x01
 2ea:	80 83       	st	Z, r24
	
	*blue = blue_high << 8 | blue_low;
 2ec:	80 91 77 03 	lds	r24, 0x0377	; 0x800377 <blue_high>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	98 2f       	mov	r25, r24
 2f4:	88 27       	eor	r24, r24
 2f6:	20 91 76 03 	lds	r18, 0x0376	; 0x800376 <blue_low>
 2fa:	82 2b       	or	r24, r18
 2fc:	f8 01       	movw	r30, r16
 2fe:	91 83       	std	Z+1, r25	; 0x01
 300:	80 83       	st	Z, r24
	
	*green = green_high << 8 | green_low;
 302:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <__data_end>
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	98 2f       	mov	r25, r24
 30a:	88 27       	eor	r24, r24
 30c:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <green_low>
 310:	82 2b       	or	r24, r18
 312:	99 83       	std	Y+1, r25	; 0x01
 314:	88 83       	st	Y, r24
	
}
 316:	df 91       	pop	r29
 318:	cf 91       	pop	r28
 31a:	1f 91       	pop	r17
 31c:	0f 91       	pop	r16
 31e:	ff 90       	pop	r15
 320:	ef 90       	pop	r14
 322:	08 95       	ret

00000324 <sen9960_initialization>:

void sen9960_initialization()	// Function used to initialize the Sensor only for the RGB, no gesture or proximity used
{	
	i2c_readReg(APDS_WRITE, APDS9960_ID, &config,1);
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	48 e7       	ldi	r20, 0x78	; 120
 32a:	53 e0       	ldi	r21, 0x03	; 3
 32c:	62 e9       	ldi	r22, 0x92	; 146
 32e:	82 e7       	ldi	r24, 0x72	; 114
 330:	0e 94 d6 00 	call	0x1ac	; 0x1ac <i2c_readReg>
	
	if(config != APDS9960_ID_1)
 334:	80 91 78 03 	lds	r24, 0x0378	; 0x800378 <config>
 338:	8b 3a       	cpi	r24, 0xAB	; 171
 33a:	09 f0       	breq	.+2      	; 0x33e <sen9960_initialization+0x1a>
 33c:	ff cf       	rjmp	.-2      	; 0x33c <sen9960_initialization+0x18>
	while(1)
	{
		config = 1 << 1 | 1 << 0 | 1 << 3 | 1 << 4;
	}
	
	i2c_writeReg(APDS_WRITE, APDS9960_ENABLE, &config, 1);
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	48 e7       	ldi	r20, 0x78	; 120
 344:	53 e0       	ldi	r21, 0x03	; 3
 346:	60 e8       	ldi	r22, 0x80	; 128
 348:	82 e7       	ldi	r24, 0x72	; 114
 34a:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_ATIME;
 34e:	8b ed       	ldi	r24, 0xDB	; 219
 350:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_ATIME, &config, 1);
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	48 e7       	ldi	r20, 0x78	; 120
 35a:	53 e0       	ldi	r21, 0x03	; 3
 35c:	61 e8       	ldi	r22, 0x81	; 129
 35e:	82 e7       	ldi	r24, 0x72	; 114
 360:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_WTIME;
 364:	86 ef       	ldi	r24, 0xF6	; 246
 366:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_WTIME, &config, 1);
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	48 e7       	ldi	r20, 0x78	; 120
 370:	53 e0       	ldi	r21, 0x03	; 3
 372:	63 e8       	ldi	r22, 0x83	; 131
 374:	82 e7       	ldi	r24, 0x72	; 114
 376:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_PROX_PPULSE;
 37a:	87 e8       	ldi	r24, 0x87	; 135
 37c:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_PPULSE, &config, 1);
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	48 e7       	ldi	r20, 0x78	; 120
 386:	53 e0       	ldi	r21, 0x03	; 3
 388:	6e e8       	ldi	r22, 0x8E	; 142
 38a:	82 e7       	ldi	r24, 0x72	; 114
 38c:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_POFFSET_UR;
 390:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_POFFSET_UR, &config, 1);
 394:	21 e0       	ldi	r18, 0x01	; 1
 396:	30 e0       	ldi	r19, 0x00	; 0
 398:	48 e7       	ldi	r20, 0x78	; 120
 39a:	53 e0       	ldi	r21, 0x03	; 3
 39c:	6d e9       	ldi	r22, 0x9D	; 157
 39e:	82 e7       	ldi	r24, 0x72	; 114
 3a0:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_POFFSET_DL;
 3a4:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_POFFSET_DL, &config, 1);
 3a8:	21 e0       	ldi	r18, 0x01	; 1
 3aa:	30 e0       	ldi	r19, 0x00	; 0
 3ac:	48 e7       	ldi	r20, 0x78	; 120
 3ae:	53 e0       	ldi	r21, 0x03	; 3
 3b0:	6e e9       	ldi	r22, 0x9E	; 158
 3b2:	82 e7       	ldi	r24, 0x72	; 114
 3b4:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_CONFIG1;
 3b8:	80 e6       	ldi	r24, 0x60	; 96
 3ba:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_CONFIG1, &config, 1);
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	48 e7       	ldi	r20, 0x78	; 120
 3c4:	53 e0       	ldi	r21, 0x03	; 3
 3c6:	6d e8       	ldi	r22, 0x8D	; 141
 3c8:	82 e7       	ldi	r24, 0x72	; 114
 3ca:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_PERS;
 3ce:	81 e1       	ldi	r24, 0x11	; 17
 3d0:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_PERS, &config, 1);
 3d4:	21 e0       	ldi	r18, 0x01	; 1
 3d6:	30 e0       	ldi	r19, 0x00	; 0
 3d8:	48 e7       	ldi	r20, 0x78	; 120
 3da:	53 e0       	ldi	r21, 0x03	; 3
 3dc:	6c e8       	ldi	r22, 0x8C	; 140
 3de:	82 e7       	ldi	r24, 0x72	; 114
 3e0:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_CONFIG2;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	80 93 78 03 	sts	0x0378, r24	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_CONFIG2, &config, 1);
 3ea:	21 e0       	ldi	r18, 0x01	; 1
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	48 e7       	ldi	r20, 0x78	; 120
 3f0:	53 e0       	ldi	r21, 0x03	; 3
 3f2:	60 e9       	ldi	r22, 0x90	; 144
 3f4:	82 e7       	ldi	r24, 0x72	; 114
 3f6:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
	config = DEFAULT_CONFIG3;
 3fa:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <config>
	
	i2c_writeReg(APDS_WRITE, APDS9960_CONFIG3, &config, 1);
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	48 e7       	ldi	r20, 0x78	; 120
 404:	53 e0       	ldi	r21, 0x03	; 3
 406:	6f e9       	ldi	r22, 0x9F	; 159
 408:	82 e7       	ldi	r24, 0x72	; 114
 40a:	0e 94 a4 00 	call	0x148	; 0x148 <i2c_writeReg>
 40e:	08 95       	ret

00000410 <main>:

FILE UART_str = FDEV_SETUP_STREAM(sending_char, NULL , _FDEV_SETUP_WRITE);
char results[256];			// Array results

int main(void)
{
 410:	cf 93       	push	r28
 412:	df 93       	push	r29
 414:	00 d0       	rcall	.+0      	; 0x416 <main+0x6>
 416:	00 d0       	rcall	.+0      	; 0x418 <main+0x8>
 418:	00 d0       	rcall	.+0      	; 0x41a <main+0xa>
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
	uint16_t red = 0;		// Declare red
 41e:	1a 82       	std	Y+2, r1	; 0x02
 420:	19 82       	std	Y+1, r1	; 0x01
	uint16_t blue = 0;		// Declare blue
 422:	1c 82       	std	Y+4, r1	; 0x04
 424:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t green = 0;		// Declare green
 426:	1e 82       	std	Y+6, r1	; 0x06
 428:	1d 82       	std	Y+5, r1	; 0x05
	
	i2c_init();				// i2C function call
 42a:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	UART_initialization();	// uart initialization function call
 42e:	0e 94 23 01 	call	0x246	; 0x246 <UART_initialization>
	stdout = &UART_str;		// standard stream
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	91 e0       	ldi	r25, 0x01	; 1
 436:	90 93 7c 03 	sts	0x037C, r25	; 0x80037c <__iob+0x3>
 43a:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <__iob+0x2>
	sen9960_initialization();  // initialize 9960 sensor function call
 43e:	0e 94 92 01 	call	0x324	; 0x324 <sen9960_initialization>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 442:	2f ef       	ldi	r18, 0xFF	; 255
 444:	87 ea       	ldi	r24, 0xA7	; 167
 446:	91 e6       	ldi	r25, 0x61	; 97
 448:	21 50       	subi	r18, 0x01	; 1
 44a:	80 40       	sbci	r24, 0x00	; 0
 44c:	90 40       	sbci	r25, 0x00	; 0
 44e:	e1 f7       	brne	.-8      	; 0x448 <main+0x38>
 450:	00 c0       	rjmp	.+0      	; 0x452 <main+0x42>
 452:	00 00       	nop
	
	_delay_ms(2000);	// Give time of 2s
	printf("AT\r\n");	// AT cmd
 454:	80 e1       	ldi	r24, 0x10	; 16
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	8b e7       	ldi	r24, 0x7B	; 123
 460:	92 e9       	ldi	r25, 0x92	; 146
 462:	21 50       	subi	r18, 0x01	; 1
 464:	80 40       	sbci	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	e1 f7       	brne	.-8      	; 0x462 <main+0x52>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <main+0x5c>
 46c:	00 00       	nop
	
	_delay_ms(3000);	// Give time of 3s
	printf("AT+CWMODE=1\r\n");	// AT cmd mode
 46e:	84 e1       	ldi	r24, 0x14	; 20
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 476:	2f ef       	ldi	r18, 0xFF	; 255
 478:	8b e7       	ldi	r24, 0x7B	; 123
 47a:	92 e9       	ldi	r25, 0x92	; 146
 47c:	21 50       	subi	r18, 0x01	; 1
 47e:	80 40       	sbci	r24, 0x00	; 0
 480:	90 40       	sbci	r25, 0x00	; 0
 482:	e1 f7       	brne	.-8      	; 0x47c <main+0x6c>
 484:	00 c0       	rjmp	.+0      	; 0x486 <main+0x76>
 486:	00 00       	nop
	
	_delay_ms(3000);	// Give time of 3s
	printf("AT+CWJAP=\"MOE_Wifi\",\"moo123456\"\r\n");	// AT cmd to connect to personal hotspot information
 488:	81 e2       	ldi	r24, 0x21	; 33
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
		
		Colors(&red, &blue, &green);	// Call colors function
		
		printf("AT+CIPSEND=100\r\n");	// AT cmd to send 100 chars
	
		printf("GET https://api.thingspeak.com/update?api_key=VBIZQ9TJL06VKSR8&field1=%05u\r\n", red); // Send red value to thingspeak
 490:	0f 2e       	mov	r0, r31
 492:	fa e8       	ldi	r31, 0x8A	; 138
 494:	cf 2e       	mov	r12, r31
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	df 2e       	mov	r13, r31
 49a:	f0 2d       	mov	r31, r0
	
		Colors(&red, &blue, &green);	// Call colors function
		
		printf("AT+CIPSEND=100\r\n");	// AT cmd to send 100 chars
		
		printf("GET https://api.thingspeak.com/update?api_key=VBIZQ9TJL06VKSR8&field2=%05u\r\n", blue);	// Send blue value to thingspeak
 49c:	0f 2e       	mov	r0, r31
 49e:	f7 ed       	ldi	r31, 0xD7	; 215
 4a0:	ef 2e       	mov	r14, r31
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	ff 2e       	mov	r15, r31
 4a6:	f0 2d       	mov	r31, r0
		
		Colors(&red, &blue, &green);	// Call colors function
		
		printf("AT+CIPSEND=100\r\n");	// AT cmd to send 100 chars
		
		printf("GET https://api.thingspeak.com/update?api_key=VBIZQ9TJL06VKSR8&field3=%05u\r\n", green); // Send green value to thingspeak
 4a8:	04 e2       	ldi	r16, 0x24	; 36
 4aa:	12 e0       	ldi	r17, 0x02	; 2
 4ac:	2f ef       	ldi	r18, 0xFF	; 255
 4ae:	8d e3       	ldi	r24, 0x3D	; 61
 4b0:	99 e4       	ldi	r25, 0x49	; 73
 4b2:	21 50       	subi	r18, 0x01	; 1
 4b4:	80 40       	sbci	r24, 0x00	; 0
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	e1 f7       	brne	.-8      	; 0x4b2 <main+0xa2>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <main+0xac>
 4bc:	00 00       	nop
	
	while (1)
	{
		_delay_ms(1500);				// Give time of 1.5s
		
		printf("AT+CIPMUX=0\r\n");		// AT cmd for CIPMUX
 4be:	82 e4       	ldi	r24, 0x42	; 66
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	8d e3       	ldi	r24, 0x3D	; 61
 4ca:	99 e4       	ldi	r25, 0x49	; 73
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <main+0xbc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <main+0xc6>
 4d6:	00 00       	nop
		
		_delay_ms(1500);				// Give time of 1.5s
		
		printf("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");  // AT cmd to communicate to thingspeak
 4d8:	8f e4       	ldi	r24, 0x4F	; 79
 4da:	91 e0       	ldi	r25, 0x01	; 1
 4dc:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 4e0:	2f ef       	ldi	r18, 0xFF	; 255
 4e2:	8d e3       	ldi	r24, 0x3D	; 61
 4e4:	99 e4       	ldi	r25, 0x49	; 73
 4e6:	21 50       	subi	r18, 0x01	; 1
 4e8:	80 40       	sbci	r24, 0x00	; 0
 4ea:	90 40       	sbci	r25, 0x00	; 0
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <main+0xd6>
 4ee:	00 c0       	rjmp	.+0      	; 0x4f0 <main+0xe0>
 4f0:	00 00       	nop
		
		_delay_ms(1500);				// Give time of 1.5s
		
		Colors(&red, &blue, &green);	// Call colors function
 4f2:	ae 01       	movw	r20, r28
 4f4:	4b 5f       	subi	r20, 0xFB	; 251
 4f6:	5f 4f       	sbci	r21, 0xFF	; 255
 4f8:	be 01       	movw	r22, r28
 4fa:	6d 5f       	subi	r22, 0xFD	; 253
 4fc:	7f 4f       	sbci	r23, 0xFF	; 255
 4fe:	ce 01       	movw	r24, r28
 500:	01 96       	adiw	r24, 0x01	; 1
 502:	0e 94 32 01 	call	0x264	; 0x264 <Colors>
		
		printf("AT+CIPSEND=100\r\n");	// AT cmd to send 100 chars
 506:	8a e7       	ldi	r24, 0x7A	; 122
 508:	91 e0       	ldi	r25, 0x01	; 1
 50a:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
	
		printf("GET https://api.thingspeak.com/update?api_key=VBIZQ9TJL06VKSR8&field1=%05u\r\n", red); // Send red value to thingspeak
 50e:	8a 81       	ldd	r24, Y+2	; 0x02
 510:	8f 93       	push	r24
 512:	89 81       	ldd	r24, Y+1	; 0x01
 514:	8f 93       	push	r24
 516:	df 92       	push	r13
 518:	cf 92       	push	r12
 51a:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 51e:	2f ef       	ldi	r18, 0xFF	; 255
 520:	8d e3       	ldi	r24, 0x3D	; 61
 522:	99 e4       	ldi	r25, 0x49	; 73
 524:	21 50       	subi	r18, 0x01	; 1
 526:	80 40       	sbci	r24, 0x00	; 0
 528:	90 40       	sbci	r25, 0x00	; 0
 52a:	e1 f7       	brne	.-8      	; 0x524 <main+0x114>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <main+0x11e>
 52e:	00 00       	nop

		
		_delay_ms(1500);				// Give time of 1.5s
		
		printf("AT+CIPMUX=0\r\n");		// AT cmd for CIPMUX
 530:	82 e4       	ldi	r24, 0x42	; 66
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 538:	2f ef       	ldi	r18, 0xFF	; 255
 53a:	8d e3       	ldi	r24, 0x3D	; 61
 53c:	99 e4       	ldi	r25, 0x49	; 73
 53e:	21 50       	subi	r18, 0x01	; 1
 540:	80 40       	sbci	r24, 0x00	; 0
 542:	90 40       	sbci	r25, 0x00	; 0
 544:	e1 f7       	brne	.-8      	; 0x53e <main+0x12e>
 546:	00 c0       	rjmp	.+0      	; 0x548 <main+0x138>
 548:	00 00       	nop
		
		_delay_ms(1500);				// Give time of 1.5s
		
		printf("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");  // AT cmd to communicate to thingspeak
 54a:	8f e4       	ldi	r24, 0x4F	; 79
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	8d e3       	ldi	r24, 0x3D	; 61
 556:	99 e4       	ldi	r25, 0x49	; 73
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x148>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x152>
 562:	00 00       	nop
		
		_delay_ms(1500);				// Give time of 1.5s
	
		Colors(&red, &blue, &green);	// Call colors function
 564:	ae 01       	movw	r20, r28
 566:	4b 5f       	subi	r20, 0xFB	; 251
 568:	5f 4f       	sbci	r21, 0xFF	; 255
 56a:	be 01       	movw	r22, r28
 56c:	6d 5f       	subi	r22, 0xFD	; 253
 56e:	7f 4f       	sbci	r23, 0xFF	; 255
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	0e 94 32 01 	call	0x264	; 0x264 <Colors>
		
		printf("AT+CIPSEND=100\r\n");	// AT cmd to send 100 chars
 578:	8a e7       	ldi	r24, 0x7A	; 122
 57a:	91 e0       	ldi	r25, 0x01	; 1
 57c:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
		
		printf("GET https://api.thingspeak.com/update?api_key=VBIZQ9TJL06VKSR8&field2=%05u\r\n", blue);	// Send blue value to thingspeak
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	8f 93       	push	r24
 584:	8b 81       	ldd	r24, Y+3	; 0x03
 586:	8f 93       	push	r24
 588:	ff 92       	push	r15
 58a:	ef 92       	push	r14
 58c:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 590:	2f ef       	ldi	r18, 0xFF	; 255
 592:	8d e3       	ldi	r24, 0x3D	; 61
 594:	99 e4       	ldi	r25, 0x49	; 73
 596:	21 50       	subi	r18, 0x01	; 1
 598:	80 40       	sbci	r24, 0x00	; 0
 59a:	90 40       	sbci	r25, 0x00	; 0
 59c:	e1 f7       	brne	.-8      	; 0x596 <main+0x186>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <main+0x190>
 5a0:	00 00       	nop
		
	
		_delay_ms(1500);				// Give time of 1.5s
		
		printf("AT+CIPMUX=0\r\n");		// AT cmd for CIPMUX
 5a2:	82 e4       	ldi	r24, 0x42	; 66
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	8d e3       	ldi	r24, 0x3D	; 61
 5ae:	99 e4       	ldi	r25, 0x49	; 73
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <main+0x1a0>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <main+0x1aa>
 5ba:	00 00       	nop
		
		_delay_ms(1500);				// Give time of 1.5s
		
		printf("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");  // AT cmd to communicate to thingspeak
 5bc:	8f e4       	ldi	r24, 0x4F	; 79
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
 5c4:	2f ef       	ldi	r18, 0xFF	; 255
 5c6:	8d e3       	ldi	r24, 0x3D	; 61
 5c8:	99 e4       	ldi	r25, 0x49	; 73
 5ca:	21 50       	subi	r18, 0x01	; 1
 5cc:	80 40       	sbci	r24, 0x00	; 0
 5ce:	90 40       	sbci	r25, 0x00	; 0
 5d0:	e1 f7       	brne	.-8      	; 0x5ca <main+0x1ba>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <main+0x1c4>
 5d4:	00 00       	nop
		
		_delay_ms(1500);				// Give time of 1.5s
		
		Colors(&red, &blue, &green);	// Call colors function
 5d6:	ae 01       	movw	r20, r28
 5d8:	4b 5f       	subi	r20, 0xFB	; 251
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	be 01       	movw	r22, r28
 5de:	6d 5f       	subi	r22, 0xFD	; 253
 5e0:	7f 4f       	sbci	r23, 0xFF	; 255
 5e2:	ce 01       	movw	r24, r28
 5e4:	01 96       	adiw	r24, 0x01	; 1
 5e6:	0e 94 32 01 	call	0x264	; 0x264 <Colors>
		
		printf("AT+CIPSEND=100\r\n");	// AT cmd to send 100 chars
 5ea:	8a e7       	ldi	r24, 0x7A	; 122
 5ec:	91 e0       	ldi	r25, 0x01	; 1
 5ee:	0e 94 26 03 	call	0x64c	; 0x64c <puts>
		
		printf("GET https://api.thingspeak.com/update?api_key=VBIZQ9TJL06VKSR8&field3=%05u\r\n", green); // Send green value to thingspeak
 5f2:	8e 81       	ldd	r24, Y+6	; 0x06
 5f4:	8f 93       	push	r24
 5f6:	8d 81       	ldd	r24, Y+5	; 0x05
 5f8:	8f 93       	push	r24
 5fa:	1f 93       	push	r17
 5fc:	0f 93       	push	r16
 5fe:	0e 94 10 03 	call	0x620	; 0x620 <printf>
 602:	2f ef       	ldi	r18, 0xFF	; 255
 604:	8d e3       	ldi	r24, 0x3D	; 61
 606:	99 e4       	ldi	r25, 0x49	; 73
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	80 40       	sbci	r24, 0x00	; 0
 60c:	90 40       	sbci	r25, 0x00	; 0
 60e:	e1 f7       	brne	.-8      	; 0x608 <main+0x1f8>
 610:	00 c0       	rjmp	.+0      	; 0x612 <main+0x202>
 612:	00 00       	nop
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	f8 94       	cli
 618:	de bf       	out	0x3e, r29	; 62
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	cd bf       	out	0x3d, r28	; 61
 61e:	46 cf       	rjmp	.-372    	; 0x4ac <main+0x9c>

00000620 <printf>:
 620:	a0 e0       	ldi	r26, 0x00	; 0
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	e6 e1       	ldi	r30, 0x16	; 22
 626:	f3 e0       	ldi	r31, 0x03	; 3
 628:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__prologue_saves__+0x20>
 62c:	ae 01       	movw	r20, r28
 62e:	4b 5f       	subi	r20, 0xFB	; 251
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	fa 01       	movw	r30, r20
 634:	61 91       	ld	r22, Z+
 636:	71 91       	ld	r23, Z+
 638:	af 01       	movw	r20, r30
 63a:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <__iob+0x2>
 63e:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <__iob+0x3>
 642:	0e 94 56 03 	call	0x6ac	; 0x6ac <vfprintf>
 646:	e2 e0       	ldi	r30, 0x02	; 2
 648:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__epilogue_restores__+0x20>

0000064c <puts>:
 64c:	0f 93       	push	r16
 64e:	1f 93       	push	r17
 650:	cf 93       	push	r28
 652:	df 93       	push	r29
 654:	e0 91 7b 03 	lds	r30, 0x037B	; 0x80037b <__iob+0x2>
 658:	f0 91 7c 03 	lds	r31, 0x037C	; 0x80037c <__iob+0x3>
 65c:	23 81       	ldd	r18, Z+3	; 0x03
 65e:	21 ff       	sbrs	r18, 1
 660:	1b c0       	rjmp	.+54     	; 0x698 <puts+0x4c>
 662:	8c 01       	movw	r16, r24
 664:	d0 e0       	ldi	r29, 0x00	; 0
 666:	c0 e0       	ldi	r28, 0x00	; 0
 668:	f8 01       	movw	r30, r16
 66a:	81 91       	ld	r24, Z+
 66c:	8f 01       	movw	r16, r30
 66e:	60 91 7b 03 	lds	r22, 0x037B	; 0x80037b <__iob+0x2>
 672:	70 91 7c 03 	lds	r23, 0x037C	; 0x80037c <__iob+0x3>
 676:	db 01       	movw	r26, r22
 678:	18 96       	adiw	r26, 0x08	; 8
 67a:	ed 91       	ld	r30, X+
 67c:	fc 91       	ld	r31, X
 67e:	19 97       	sbiw	r26, 0x09	; 9
 680:	88 23       	and	r24, r24
 682:	31 f0       	breq	.+12     	; 0x690 <puts+0x44>
 684:	09 95       	icall
 686:	89 2b       	or	r24, r25
 688:	79 f3       	breq	.-34     	; 0x668 <puts+0x1c>
 68a:	df ef       	ldi	r29, 0xFF	; 255
 68c:	cf ef       	ldi	r28, 0xFF	; 255
 68e:	ec cf       	rjmp	.-40     	; 0x668 <puts+0x1c>
 690:	8a e0       	ldi	r24, 0x0A	; 10
 692:	09 95       	icall
 694:	89 2b       	or	r24, r25
 696:	19 f0       	breq	.+6      	; 0x69e <puts+0x52>
 698:	8f ef       	ldi	r24, 0xFF	; 255
 69a:	9f ef       	ldi	r25, 0xFF	; 255
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <puts+0x56>
 69e:	8d 2f       	mov	r24, r29
 6a0:	9c 2f       	mov	r25, r28
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	08 95       	ret

000006ac <vfprintf>:
 6ac:	ab e0       	ldi	r26, 0x0B	; 11
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	ec e5       	ldi	r30, 0x5C	; 92
 6b2:	f3 e0       	ldi	r31, 0x03	; 3
 6b4:	0c 94 e7 05 	jmp	0xbce	; 0xbce <__prologue_saves__>
 6b8:	6c 01       	movw	r12, r24
 6ba:	7b 01       	movw	r14, r22
 6bc:	8a 01       	movw	r16, r20
 6be:	fc 01       	movw	r30, r24
 6c0:	17 82       	std	Z+7, r1	; 0x07
 6c2:	16 82       	std	Z+6, r1	; 0x06
 6c4:	83 81       	ldd	r24, Z+3	; 0x03
 6c6:	81 ff       	sbrs	r24, 1
 6c8:	cc c1       	rjmp	.+920    	; 0xa62 <__stack+0x163>
 6ca:	ce 01       	movw	r24, r28
 6cc:	01 96       	adiw	r24, 0x01	; 1
 6ce:	3c 01       	movw	r6, r24
 6d0:	f6 01       	movw	r30, r12
 6d2:	93 81       	ldd	r25, Z+3	; 0x03
 6d4:	f7 01       	movw	r30, r14
 6d6:	93 fd       	sbrc	r25, 3
 6d8:	85 91       	lpm	r24, Z+
 6da:	93 ff       	sbrs	r25, 3
 6dc:	81 91       	ld	r24, Z+
 6de:	7f 01       	movw	r14, r30
 6e0:	88 23       	and	r24, r24
 6e2:	09 f4       	brne	.+2      	; 0x6e6 <vfprintf+0x3a>
 6e4:	ba c1       	rjmp	.+884    	; 0xa5a <__stack+0x15b>
 6e6:	85 32       	cpi	r24, 0x25	; 37
 6e8:	39 f4       	brne	.+14     	; 0x6f8 <vfprintf+0x4c>
 6ea:	93 fd       	sbrc	r25, 3
 6ec:	85 91       	lpm	r24, Z+
 6ee:	93 ff       	sbrs	r25, 3
 6f0:	81 91       	ld	r24, Z+
 6f2:	7f 01       	movw	r14, r30
 6f4:	85 32       	cpi	r24, 0x25	; 37
 6f6:	29 f4       	brne	.+10     	; 0x702 <vfprintf+0x56>
 6f8:	b6 01       	movw	r22, r12
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 700:	e7 cf       	rjmp	.-50     	; 0x6d0 <vfprintf+0x24>
 702:	91 2c       	mov	r9, r1
 704:	21 2c       	mov	r2, r1
 706:	31 2c       	mov	r3, r1
 708:	ff e1       	ldi	r31, 0x1F	; 31
 70a:	f3 15       	cp	r31, r3
 70c:	d8 f0       	brcs	.+54     	; 0x744 <vfprintf+0x98>
 70e:	8b 32       	cpi	r24, 0x2B	; 43
 710:	79 f0       	breq	.+30     	; 0x730 <vfprintf+0x84>
 712:	38 f4       	brcc	.+14     	; 0x722 <vfprintf+0x76>
 714:	80 32       	cpi	r24, 0x20	; 32
 716:	79 f0       	breq	.+30     	; 0x736 <vfprintf+0x8a>
 718:	83 32       	cpi	r24, 0x23	; 35
 71a:	a1 f4       	brne	.+40     	; 0x744 <vfprintf+0x98>
 71c:	23 2d       	mov	r18, r3
 71e:	20 61       	ori	r18, 0x10	; 16
 720:	1d c0       	rjmp	.+58     	; 0x75c <vfprintf+0xb0>
 722:	8d 32       	cpi	r24, 0x2D	; 45
 724:	61 f0       	breq	.+24     	; 0x73e <vfprintf+0x92>
 726:	80 33       	cpi	r24, 0x30	; 48
 728:	69 f4       	brne	.+26     	; 0x744 <vfprintf+0x98>
 72a:	23 2d       	mov	r18, r3
 72c:	21 60       	ori	r18, 0x01	; 1
 72e:	16 c0       	rjmp	.+44     	; 0x75c <vfprintf+0xb0>
 730:	83 2d       	mov	r24, r3
 732:	82 60       	ori	r24, 0x02	; 2
 734:	38 2e       	mov	r3, r24
 736:	e3 2d       	mov	r30, r3
 738:	e4 60       	ori	r30, 0x04	; 4
 73a:	3e 2e       	mov	r3, r30
 73c:	2a c0       	rjmp	.+84     	; 0x792 <vfprintf+0xe6>
 73e:	f3 2d       	mov	r31, r3
 740:	f8 60       	ori	r31, 0x08	; 8
 742:	1d c0       	rjmp	.+58     	; 0x77e <vfprintf+0xd2>
 744:	37 fc       	sbrc	r3, 7
 746:	2d c0       	rjmp	.+90     	; 0x7a2 <vfprintf+0xf6>
 748:	20 ed       	ldi	r18, 0xD0	; 208
 74a:	28 0f       	add	r18, r24
 74c:	2a 30       	cpi	r18, 0x0A	; 10
 74e:	40 f0       	brcs	.+16     	; 0x760 <vfprintf+0xb4>
 750:	8e 32       	cpi	r24, 0x2E	; 46
 752:	b9 f4       	brne	.+46     	; 0x782 <vfprintf+0xd6>
 754:	36 fc       	sbrc	r3, 6
 756:	81 c1       	rjmp	.+770    	; 0xa5a <__stack+0x15b>
 758:	23 2d       	mov	r18, r3
 75a:	20 64       	ori	r18, 0x40	; 64
 75c:	32 2e       	mov	r3, r18
 75e:	19 c0       	rjmp	.+50     	; 0x792 <vfprintf+0xe6>
 760:	36 fe       	sbrs	r3, 6
 762:	06 c0       	rjmp	.+12     	; 0x770 <vfprintf+0xc4>
 764:	8a e0       	ldi	r24, 0x0A	; 10
 766:	98 9e       	mul	r9, r24
 768:	20 0d       	add	r18, r0
 76a:	11 24       	eor	r1, r1
 76c:	92 2e       	mov	r9, r18
 76e:	11 c0       	rjmp	.+34     	; 0x792 <vfprintf+0xe6>
 770:	ea e0       	ldi	r30, 0x0A	; 10
 772:	2e 9e       	mul	r2, r30
 774:	20 0d       	add	r18, r0
 776:	11 24       	eor	r1, r1
 778:	22 2e       	mov	r2, r18
 77a:	f3 2d       	mov	r31, r3
 77c:	f0 62       	ori	r31, 0x20	; 32
 77e:	3f 2e       	mov	r3, r31
 780:	08 c0       	rjmp	.+16     	; 0x792 <vfprintf+0xe6>
 782:	8c 36       	cpi	r24, 0x6C	; 108
 784:	21 f4       	brne	.+8      	; 0x78e <vfprintf+0xe2>
 786:	83 2d       	mov	r24, r3
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	38 2e       	mov	r3, r24
 78c:	02 c0       	rjmp	.+4      	; 0x792 <vfprintf+0xe6>
 78e:	88 36       	cpi	r24, 0x68	; 104
 790:	41 f4       	brne	.+16     	; 0x7a2 <vfprintf+0xf6>
 792:	f7 01       	movw	r30, r14
 794:	93 fd       	sbrc	r25, 3
 796:	85 91       	lpm	r24, Z+
 798:	93 ff       	sbrs	r25, 3
 79a:	81 91       	ld	r24, Z+
 79c:	7f 01       	movw	r14, r30
 79e:	81 11       	cpse	r24, r1
 7a0:	b3 cf       	rjmp	.-154    	; 0x708 <vfprintf+0x5c>
 7a2:	98 2f       	mov	r25, r24
 7a4:	9f 7d       	andi	r25, 0xDF	; 223
 7a6:	95 54       	subi	r25, 0x45	; 69
 7a8:	93 30       	cpi	r25, 0x03	; 3
 7aa:	28 f4       	brcc	.+10     	; 0x7b6 <vfprintf+0x10a>
 7ac:	0c 5f       	subi	r16, 0xFC	; 252
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	9f e3       	ldi	r25, 0x3F	; 63
 7b2:	99 83       	std	Y+1, r25	; 0x01
 7b4:	0d c0       	rjmp	.+26     	; 0x7d0 <vfprintf+0x124>
 7b6:	83 36       	cpi	r24, 0x63	; 99
 7b8:	31 f0       	breq	.+12     	; 0x7c6 <vfprintf+0x11a>
 7ba:	83 37       	cpi	r24, 0x73	; 115
 7bc:	71 f0       	breq	.+28     	; 0x7da <vfprintf+0x12e>
 7be:	83 35       	cpi	r24, 0x53	; 83
 7c0:	09 f0       	breq	.+2      	; 0x7c4 <vfprintf+0x118>
 7c2:	59 c0       	rjmp	.+178    	; 0x876 <vfprintf+0x1ca>
 7c4:	21 c0       	rjmp	.+66     	; 0x808 <vfprintf+0x15c>
 7c6:	f8 01       	movw	r30, r16
 7c8:	80 81       	ld	r24, Z
 7ca:	89 83       	std	Y+1, r24	; 0x01
 7cc:	0e 5f       	subi	r16, 0xFE	; 254
 7ce:	1f 4f       	sbci	r17, 0xFF	; 255
 7d0:	88 24       	eor	r8, r8
 7d2:	83 94       	inc	r8
 7d4:	91 2c       	mov	r9, r1
 7d6:	53 01       	movw	r10, r6
 7d8:	13 c0       	rjmp	.+38     	; 0x800 <vfprintf+0x154>
 7da:	28 01       	movw	r4, r16
 7dc:	f2 e0       	ldi	r31, 0x02	; 2
 7de:	4f 0e       	add	r4, r31
 7e0:	51 1c       	adc	r5, r1
 7e2:	f8 01       	movw	r30, r16
 7e4:	a0 80       	ld	r10, Z
 7e6:	b1 80       	ldd	r11, Z+1	; 0x01
 7e8:	36 fe       	sbrs	r3, 6
 7ea:	03 c0       	rjmp	.+6      	; 0x7f2 <vfprintf+0x146>
 7ec:	69 2d       	mov	r22, r9
 7ee:	70 e0       	ldi	r23, 0x00	; 0
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <vfprintf+0x14a>
 7f2:	6f ef       	ldi	r22, 0xFF	; 255
 7f4:	7f ef       	ldi	r23, 0xFF	; 255
 7f6:	c5 01       	movw	r24, r10
 7f8:	0e 94 42 05 	call	0xa84	; 0xa84 <strnlen>
 7fc:	4c 01       	movw	r8, r24
 7fe:	82 01       	movw	r16, r4
 800:	f3 2d       	mov	r31, r3
 802:	ff 77       	andi	r31, 0x7F	; 127
 804:	3f 2e       	mov	r3, r31
 806:	16 c0       	rjmp	.+44     	; 0x834 <vfprintf+0x188>
 808:	28 01       	movw	r4, r16
 80a:	22 e0       	ldi	r18, 0x02	; 2
 80c:	42 0e       	add	r4, r18
 80e:	51 1c       	adc	r5, r1
 810:	f8 01       	movw	r30, r16
 812:	a0 80       	ld	r10, Z
 814:	b1 80       	ldd	r11, Z+1	; 0x01
 816:	36 fe       	sbrs	r3, 6
 818:	03 c0       	rjmp	.+6      	; 0x820 <vfprintf+0x174>
 81a:	69 2d       	mov	r22, r9
 81c:	70 e0       	ldi	r23, 0x00	; 0
 81e:	02 c0       	rjmp	.+4      	; 0x824 <vfprintf+0x178>
 820:	6f ef       	ldi	r22, 0xFF	; 255
 822:	7f ef       	ldi	r23, 0xFF	; 255
 824:	c5 01       	movw	r24, r10
 826:	0e 94 37 05 	call	0xa6e	; 0xa6e <strnlen_P>
 82a:	4c 01       	movw	r8, r24
 82c:	f3 2d       	mov	r31, r3
 82e:	f0 68       	ori	r31, 0x80	; 128
 830:	3f 2e       	mov	r3, r31
 832:	82 01       	movw	r16, r4
 834:	33 fc       	sbrc	r3, 3
 836:	1b c0       	rjmp	.+54     	; 0x86e <vfprintf+0x1c2>
 838:	82 2d       	mov	r24, r2
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	88 16       	cp	r8, r24
 83e:	99 06       	cpc	r9, r25
 840:	b0 f4       	brcc	.+44     	; 0x86e <vfprintf+0x1c2>
 842:	b6 01       	movw	r22, r12
 844:	80 e2       	ldi	r24, 0x20	; 32
 846:	90 e0       	ldi	r25, 0x00	; 0
 848:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 84c:	2a 94       	dec	r2
 84e:	f4 cf       	rjmp	.-24     	; 0x838 <vfprintf+0x18c>
 850:	f5 01       	movw	r30, r10
 852:	37 fc       	sbrc	r3, 7
 854:	85 91       	lpm	r24, Z+
 856:	37 fe       	sbrs	r3, 7
 858:	81 91       	ld	r24, Z+
 85a:	5f 01       	movw	r10, r30
 85c:	b6 01       	movw	r22, r12
 85e:	90 e0       	ldi	r25, 0x00	; 0
 860:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 864:	21 10       	cpse	r2, r1
 866:	2a 94       	dec	r2
 868:	21 e0       	ldi	r18, 0x01	; 1
 86a:	82 1a       	sub	r8, r18
 86c:	91 08       	sbc	r9, r1
 86e:	81 14       	cp	r8, r1
 870:	91 04       	cpc	r9, r1
 872:	71 f7       	brne	.-36     	; 0x850 <vfprintf+0x1a4>
 874:	e8 c0       	rjmp	.+464    	; 0xa46 <__stack+0x147>
 876:	84 36       	cpi	r24, 0x64	; 100
 878:	11 f0       	breq	.+4      	; 0x87e <vfprintf+0x1d2>
 87a:	89 36       	cpi	r24, 0x69	; 105
 87c:	41 f5       	brne	.+80     	; 0x8ce <vfprintf+0x222>
 87e:	f8 01       	movw	r30, r16
 880:	37 fe       	sbrs	r3, 7
 882:	07 c0       	rjmp	.+14     	; 0x892 <vfprintf+0x1e6>
 884:	60 81       	ld	r22, Z
 886:	71 81       	ldd	r23, Z+1	; 0x01
 888:	82 81       	ldd	r24, Z+2	; 0x02
 88a:	93 81       	ldd	r25, Z+3	; 0x03
 88c:	0c 5f       	subi	r16, 0xFC	; 252
 88e:	1f 4f       	sbci	r17, 0xFF	; 255
 890:	08 c0       	rjmp	.+16     	; 0x8a2 <vfprintf+0x1f6>
 892:	60 81       	ld	r22, Z
 894:	71 81       	ldd	r23, Z+1	; 0x01
 896:	07 2e       	mov	r0, r23
 898:	00 0c       	add	r0, r0
 89a:	88 0b       	sbc	r24, r24
 89c:	99 0b       	sbc	r25, r25
 89e:	0e 5f       	subi	r16, 0xFE	; 254
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	f3 2d       	mov	r31, r3
 8a4:	ff 76       	andi	r31, 0x6F	; 111
 8a6:	3f 2e       	mov	r3, r31
 8a8:	97 ff       	sbrs	r25, 7
 8aa:	09 c0       	rjmp	.+18     	; 0x8be <vfprintf+0x212>
 8ac:	90 95       	com	r25
 8ae:	80 95       	com	r24
 8b0:	70 95       	com	r23
 8b2:	61 95       	neg	r22
 8b4:	7f 4f       	sbci	r23, 0xFF	; 255
 8b6:	8f 4f       	sbci	r24, 0xFF	; 255
 8b8:	9f 4f       	sbci	r25, 0xFF	; 255
 8ba:	f0 68       	ori	r31, 0x80	; 128
 8bc:	3f 2e       	mov	r3, r31
 8be:	2a e0       	ldi	r18, 0x0A	; 10
 8c0:	30 e0       	ldi	r19, 0x00	; 0
 8c2:	a3 01       	movw	r20, r6
 8c4:	0e 94 89 05 	call	0xb12	; 0xb12 <__ultoa_invert>
 8c8:	88 2e       	mov	r8, r24
 8ca:	86 18       	sub	r8, r6
 8cc:	45 c0       	rjmp	.+138    	; 0x958 <__stack+0x59>
 8ce:	85 37       	cpi	r24, 0x75	; 117
 8d0:	31 f4       	brne	.+12     	; 0x8de <vfprintf+0x232>
 8d2:	23 2d       	mov	r18, r3
 8d4:	2f 7e       	andi	r18, 0xEF	; 239
 8d6:	b2 2e       	mov	r11, r18
 8d8:	2a e0       	ldi	r18, 0x0A	; 10
 8da:	30 e0       	ldi	r19, 0x00	; 0
 8dc:	25 c0       	rjmp	.+74     	; 0x928 <__stack+0x29>
 8de:	93 2d       	mov	r25, r3
 8e0:	99 7f       	andi	r25, 0xF9	; 249
 8e2:	b9 2e       	mov	r11, r25
 8e4:	8f 36       	cpi	r24, 0x6F	; 111
 8e6:	c1 f0       	breq	.+48     	; 0x918 <__stack+0x19>
 8e8:	18 f4       	brcc	.+6      	; 0x8f0 <vfprintf+0x244>
 8ea:	88 35       	cpi	r24, 0x58	; 88
 8ec:	79 f0       	breq	.+30     	; 0x90c <__stack+0xd>
 8ee:	b5 c0       	rjmp	.+362    	; 0xa5a <__stack+0x15b>
 8f0:	80 37       	cpi	r24, 0x70	; 112
 8f2:	19 f0       	breq	.+6      	; 0x8fa <vfprintf+0x24e>
 8f4:	88 37       	cpi	r24, 0x78	; 120
 8f6:	21 f0       	breq	.+8      	; 0x900 <__stack+0x1>
 8f8:	b0 c0       	rjmp	.+352    	; 0xa5a <__stack+0x15b>
 8fa:	e9 2f       	mov	r30, r25
 8fc:	e0 61       	ori	r30, 0x10	; 16
 8fe:	be 2e       	mov	r11, r30
 900:	b4 fe       	sbrs	r11, 4
 902:	0d c0       	rjmp	.+26     	; 0x91e <__stack+0x1f>
 904:	fb 2d       	mov	r31, r11
 906:	f4 60       	ori	r31, 0x04	; 4
 908:	bf 2e       	mov	r11, r31
 90a:	09 c0       	rjmp	.+18     	; 0x91e <__stack+0x1f>
 90c:	34 fe       	sbrs	r3, 4
 90e:	0a c0       	rjmp	.+20     	; 0x924 <__stack+0x25>
 910:	29 2f       	mov	r18, r25
 912:	26 60       	ori	r18, 0x06	; 6
 914:	b2 2e       	mov	r11, r18
 916:	06 c0       	rjmp	.+12     	; 0x924 <__stack+0x25>
 918:	28 e0       	ldi	r18, 0x08	; 8
 91a:	30 e0       	ldi	r19, 0x00	; 0
 91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0x29>
 91e:	20 e1       	ldi	r18, 0x10	; 16
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0x29>
 924:	20 e1       	ldi	r18, 0x10	; 16
 926:	32 e0       	ldi	r19, 0x02	; 2
 928:	f8 01       	movw	r30, r16
 92a:	b7 fe       	sbrs	r11, 7
 92c:	07 c0       	rjmp	.+14     	; 0x93c <__stack+0x3d>
 92e:	60 81       	ld	r22, Z
 930:	71 81       	ldd	r23, Z+1	; 0x01
 932:	82 81       	ldd	r24, Z+2	; 0x02
 934:	93 81       	ldd	r25, Z+3	; 0x03
 936:	0c 5f       	subi	r16, 0xFC	; 252
 938:	1f 4f       	sbci	r17, 0xFF	; 255
 93a:	06 c0       	rjmp	.+12     	; 0x948 <__stack+0x49>
 93c:	60 81       	ld	r22, Z
 93e:	71 81       	ldd	r23, Z+1	; 0x01
 940:	80 e0       	ldi	r24, 0x00	; 0
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	0e 5f       	subi	r16, 0xFE	; 254
 946:	1f 4f       	sbci	r17, 0xFF	; 255
 948:	a3 01       	movw	r20, r6
 94a:	0e 94 89 05 	call	0xb12	; 0xb12 <__ultoa_invert>
 94e:	88 2e       	mov	r8, r24
 950:	86 18       	sub	r8, r6
 952:	fb 2d       	mov	r31, r11
 954:	ff 77       	andi	r31, 0x7F	; 127
 956:	3f 2e       	mov	r3, r31
 958:	36 fe       	sbrs	r3, 6
 95a:	0d c0       	rjmp	.+26     	; 0x976 <__stack+0x77>
 95c:	23 2d       	mov	r18, r3
 95e:	2e 7f       	andi	r18, 0xFE	; 254
 960:	a2 2e       	mov	r10, r18
 962:	89 14       	cp	r8, r9
 964:	58 f4       	brcc	.+22     	; 0x97c <__stack+0x7d>
 966:	34 fe       	sbrs	r3, 4
 968:	0b c0       	rjmp	.+22     	; 0x980 <__stack+0x81>
 96a:	32 fc       	sbrc	r3, 2
 96c:	09 c0       	rjmp	.+18     	; 0x980 <__stack+0x81>
 96e:	83 2d       	mov	r24, r3
 970:	8e 7e       	andi	r24, 0xEE	; 238
 972:	a8 2e       	mov	r10, r24
 974:	05 c0       	rjmp	.+10     	; 0x980 <__stack+0x81>
 976:	b8 2c       	mov	r11, r8
 978:	a3 2c       	mov	r10, r3
 97a:	03 c0       	rjmp	.+6      	; 0x982 <__stack+0x83>
 97c:	b8 2c       	mov	r11, r8
 97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x83>
 980:	b9 2c       	mov	r11, r9
 982:	a4 fe       	sbrs	r10, 4
 984:	0f c0       	rjmp	.+30     	; 0x9a4 <__stack+0xa5>
 986:	fe 01       	movw	r30, r28
 988:	e8 0d       	add	r30, r8
 98a:	f1 1d       	adc	r31, r1
 98c:	80 81       	ld	r24, Z
 98e:	80 33       	cpi	r24, 0x30	; 48
 990:	21 f4       	brne	.+8      	; 0x99a <__stack+0x9b>
 992:	9a 2d       	mov	r25, r10
 994:	99 7e       	andi	r25, 0xE9	; 233
 996:	a9 2e       	mov	r10, r25
 998:	09 c0       	rjmp	.+18     	; 0x9ac <__stack+0xad>
 99a:	a2 fe       	sbrs	r10, 2
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <__stack+0xab>
 99e:	b3 94       	inc	r11
 9a0:	b3 94       	inc	r11
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <__stack+0xad>
 9a4:	8a 2d       	mov	r24, r10
 9a6:	86 78       	andi	r24, 0x86	; 134
 9a8:	09 f0       	breq	.+2      	; 0x9ac <__stack+0xad>
 9aa:	b3 94       	inc	r11
 9ac:	a3 fc       	sbrc	r10, 3
 9ae:	11 c0       	rjmp	.+34     	; 0x9d2 <__stack+0xd3>
 9b0:	a0 fe       	sbrs	r10, 0
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <__stack+0xc1>
 9b4:	b2 14       	cp	r11, r2
 9b6:	88 f4       	brcc	.+34     	; 0x9da <__stack+0xdb>
 9b8:	28 0c       	add	r2, r8
 9ba:	92 2c       	mov	r9, r2
 9bc:	9b 18       	sub	r9, r11
 9be:	0e c0       	rjmp	.+28     	; 0x9dc <__stack+0xdd>
 9c0:	b2 14       	cp	r11, r2
 9c2:	60 f4       	brcc	.+24     	; 0x9dc <__stack+0xdd>
 9c4:	b6 01       	movw	r22, r12
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 9ce:	b3 94       	inc	r11
 9d0:	f7 cf       	rjmp	.-18     	; 0x9c0 <__stack+0xc1>
 9d2:	b2 14       	cp	r11, r2
 9d4:	18 f4       	brcc	.+6      	; 0x9dc <__stack+0xdd>
 9d6:	2b 18       	sub	r2, r11
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0xdf>
 9da:	98 2c       	mov	r9, r8
 9dc:	21 2c       	mov	r2, r1
 9de:	a4 fe       	sbrs	r10, 4
 9e0:	10 c0       	rjmp	.+32     	; 0xa02 <__stack+0x103>
 9e2:	b6 01       	movw	r22, r12
 9e4:	80 e3       	ldi	r24, 0x30	; 48
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 9ec:	a2 fe       	sbrs	r10, 2
 9ee:	17 c0       	rjmp	.+46     	; 0xa1e <__stack+0x11f>
 9f0:	a1 fc       	sbrc	r10, 1
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	88 e7       	ldi	r24, 0x78	; 120
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	88 e5       	ldi	r24, 0x58	; 88
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	b6 01       	movw	r22, r12
 a00:	0c c0       	rjmp	.+24     	; 0xa1a <__stack+0x11b>
 a02:	8a 2d       	mov	r24, r10
 a04:	86 78       	andi	r24, 0x86	; 134
 a06:	59 f0       	breq	.+22     	; 0xa1e <__stack+0x11f>
 a08:	a1 fe       	sbrs	r10, 1
 a0a:	02 c0       	rjmp	.+4      	; 0xa10 <__stack+0x111>
 a0c:	8b e2       	ldi	r24, 0x2B	; 43
 a0e:	01 c0       	rjmp	.+2      	; 0xa12 <__stack+0x113>
 a10:	80 e2       	ldi	r24, 0x20	; 32
 a12:	a7 fc       	sbrc	r10, 7
 a14:	8d e2       	ldi	r24, 0x2D	; 45
 a16:	b6 01       	movw	r22, r12
 a18:	90 e0       	ldi	r25, 0x00	; 0
 a1a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a1e:	89 14       	cp	r8, r9
 a20:	38 f4       	brcc	.+14     	; 0xa30 <__stack+0x131>
 a22:	b6 01       	movw	r22, r12
 a24:	80 e3       	ldi	r24, 0x30	; 48
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a2c:	9a 94       	dec	r9
 a2e:	f7 cf       	rjmp	.-18     	; 0xa1e <__stack+0x11f>
 a30:	8a 94       	dec	r8
 a32:	f3 01       	movw	r30, r6
 a34:	e8 0d       	add	r30, r8
 a36:	f1 1d       	adc	r31, r1
 a38:	80 81       	ld	r24, Z
 a3a:	b6 01       	movw	r22, r12
 a3c:	90 e0       	ldi	r25, 0x00	; 0
 a3e:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a42:	81 10       	cpse	r8, r1
 a44:	f5 cf       	rjmp	.-22     	; 0xa30 <__stack+0x131>
 a46:	22 20       	and	r2, r2
 a48:	09 f4       	brne	.+2      	; 0xa4c <__stack+0x14d>
 a4a:	42 ce       	rjmp	.-892    	; 0x6d0 <vfprintf+0x24>
 a4c:	b6 01       	movw	r22, r12
 a4e:	80 e2       	ldi	r24, 0x20	; 32
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 4d 05 	call	0xa9a	; 0xa9a <fputc>
 a56:	2a 94       	dec	r2
 a58:	f6 cf       	rjmp	.-20     	; 0xa46 <__stack+0x147>
 a5a:	f6 01       	movw	r30, r12
 a5c:	86 81       	ldd	r24, Z+6	; 0x06
 a5e:	97 81       	ldd	r25, Z+7	; 0x07
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
 a62:	8f ef       	ldi	r24, 0xFF	; 255
 a64:	9f ef       	ldi	r25, 0xFF	; 255
 a66:	2b 96       	adiw	r28, 0x0b	; 11
 a68:	e2 e1       	ldi	r30, 0x12	; 18
 a6a:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__epilogue_restores__>

00000a6e <strnlen_P>:
 a6e:	fc 01       	movw	r30, r24
 a70:	05 90       	lpm	r0, Z+
 a72:	61 50       	subi	r22, 0x01	; 1
 a74:	70 40       	sbci	r23, 0x00	; 0
 a76:	01 10       	cpse	r0, r1
 a78:	d8 f7       	brcc	.-10     	; 0xa70 <strnlen_P+0x2>
 a7a:	80 95       	com	r24
 a7c:	90 95       	com	r25
 a7e:	8e 0f       	add	r24, r30
 a80:	9f 1f       	adc	r25, r31
 a82:	08 95       	ret

00000a84 <strnlen>:
 a84:	fc 01       	movw	r30, r24
 a86:	61 50       	subi	r22, 0x01	; 1
 a88:	70 40       	sbci	r23, 0x00	; 0
 a8a:	01 90       	ld	r0, Z+
 a8c:	01 10       	cpse	r0, r1
 a8e:	d8 f7       	brcc	.-10     	; 0xa86 <strnlen+0x2>
 a90:	80 95       	com	r24
 a92:	90 95       	com	r25
 a94:	8e 0f       	add	r24, r30
 a96:	9f 1f       	adc	r25, r31
 a98:	08 95       	ret

00000a9a <fputc>:
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	fb 01       	movw	r30, r22
 aa4:	23 81       	ldd	r18, Z+3	; 0x03
 aa6:	21 fd       	sbrc	r18, 1
 aa8:	03 c0       	rjmp	.+6      	; 0xab0 <fputc+0x16>
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	9f ef       	ldi	r25, 0xFF	; 255
 aae:	2c c0       	rjmp	.+88     	; 0xb08 <fputc+0x6e>
 ab0:	22 ff       	sbrs	r18, 2
 ab2:	16 c0       	rjmp	.+44     	; 0xae0 <fputc+0x46>
 ab4:	46 81       	ldd	r20, Z+6	; 0x06
 ab6:	57 81       	ldd	r21, Z+7	; 0x07
 ab8:	24 81       	ldd	r18, Z+4	; 0x04
 aba:	35 81       	ldd	r19, Z+5	; 0x05
 abc:	42 17       	cp	r20, r18
 abe:	53 07       	cpc	r21, r19
 ac0:	44 f4       	brge	.+16     	; 0xad2 <fputc+0x38>
 ac2:	a0 81       	ld	r26, Z
 ac4:	b1 81       	ldd	r27, Z+1	; 0x01
 ac6:	9d 01       	movw	r18, r26
 ac8:	2f 5f       	subi	r18, 0xFF	; 255
 aca:	3f 4f       	sbci	r19, 0xFF	; 255
 acc:	31 83       	std	Z+1, r19	; 0x01
 ace:	20 83       	st	Z, r18
 ad0:	8c 93       	st	X, r24
 ad2:	26 81       	ldd	r18, Z+6	; 0x06
 ad4:	37 81       	ldd	r19, Z+7	; 0x07
 ad6:	2f 5f       	subi	r18, 0xFF	; 255
 ad8:	3f 4f       	sbci	r19, 0xFF	; 255
 ada:	37 83       	std	Z+7, r19	; 0x07
 adc:	26 83       	std	Z+6, r18	; 0x06
 ade:	14 c0       	rjmp	.+40     	; 0xb08 <fputc+0x6e>
 ae0:	8b 01       	movw	r16, r22
 ae2:	ec 01       	movw	r28, r24
 ae4:	fb 01       	movw	r30, r22
 ae6:	00 84       	ldd	r0, Z+8	; 0x08
 ae8:	f1 85       	ldd	r31, Z+9	; 0x09
 aea:	e0 2d       	mov	r30, r0
 aec:	09 95       	icall
 aee:	89 2b       	or	r24, r25
 af0:	e1 f6       	brne	.-72     	; 0xaaa <fputc+0x10>
 af2:	d8 01       	movw	r26, r16
 af4:	16 96       	adiw	r26, 0x06	; 6
 af6:	8d 91       	ld	r24, X+
 af8:	9c 91       	ld	r25, X
 afa:	17 97       	sbiw	r26, 0x07	; 7
 afc:	01 96       	adiw	r24, 0x01	; 1
 afe:	17 96       	adiw	r26, 0x07	; 7
 b00:	9c 93       	st	X, r25
 b02:	8e 93       	st	-X, r24
 b04:	16 97       	sbiw	r26, 0x06	; 6
 b06:	ce 01       	movw	r24, r28
 b08:	df 91       	pop	r29
 b0a:	cf 91       	pop	r28
 b0c:	1f 91       	pop	r17
 b0e:	0f 91       	pop	r16
 b10:	08 95       	ret

00000b12 <__ultoa_invert>:
 b12:	fa 01       	movw	r30, r20
 b14:	aa 27       	eor	r26, r26
 b16:	28 30       	cpi	r18, 0x08	; 8
 b18:	51 f1       	breq	.+84     	; 0xb6e <__ultoa_invert+0x5c>
 b1a:	20 31       	cpi	r18, 0x10	; 16
 b1c:	81 f1       	breq	.+96     	; 0xb7e <__ultoa_invert+0x6c>
 b1e:	e8 94       	clt
 b20:	6f 93       	push	r22
 b22:	6e 7f       	andi	r22, 0xFE	; 254
 b24:	6e 5f       	subi	r22, 0xFE	; 254
 b26:	7f 4f       	sbci	r23, 0xFF	; 255
 b28:	8f 4f       	sbci	r24, 0xFF	; 255
 b2a:	9f 4f       	sbci	r25, 0xFF	; 255
 b2c:	af 4f       	sbci	r26, 0xFF	; 255
 b2e:	b1 e0       	ldi	r27, 0x01	; 1
 b30:	3e d0       	rcall	.+124    	; 0xbae <__ultoa_invert+0x9c>
 b32:	b4 e0       	ldi	r27, 0x04	; 4
 b34:	3c d0       	rcall	.+120    	; 0xbae <__ultoa_invert+0x9c>
 b36:	67 0f       	add	r22, r23
 b38:	78 1f       	adc	r23, r24
 b3a:	89 1f       	adc	r24, r25
 b3c:	9a 1f       	adc	r25, r26
 b3e:	a1 1d       	adc	r26, r1
 b40:	68 0f       	add	r22, r24
 b42:	79 1f       	adc	r23, r25
 b44:	8a 1f       	adc	r24, r26
 b46:	91 1d       	adc	r25, r1
 b48:	a1 1d       	adc	r26, r1
 b4a:	6a 0f       	add	r22, r26
 b4c:	71 1d       	adc	r23, r1
 b4e:	81 1d       	adc	r24, r1
 b50:	91 1d       	adc	r25, r1
 b52:	a1 1d       	adc	r26, r1
 b54:	20 d0       	rcall	.+64     	; 0xb96 <__ultoa_invert+0x84>
 b56:	09 f4       	brne	.+2      	; 0xb5a <__ultoa_invert+0x48>
 b58:	68 94       	set
 b5a:	3f 91       	pop	r19
 b5c:	2a e0       	ldi	r18, 0x0A	; 10
 b5e:	26 9f       	mul	r18, r22
 b60:	11 24       	eor	r1, r1
 b62:	30 19       	sub	r19, r0
 b64:	30 5d       	subi	r19, 0xD0	; 208
 b66:	31 93       	st	Z+, r19
 b68:	de f6       	brtc	.-74     	; 0xb20 <__ultoa_invert+0xe>
 b6a:	cf 01       	movw	r24, r30
 b6c:	08 95       	ret
 b6e:	46 2f       	mov	r20, r22
 b70:	47 70       	andi	r20, 0x07	; 7
 b72:	40 5d       	subi	r20, 0xD0	; 208
 b74:	41 93       	st	Z+, r20
 b76:	b3 e0       	ldi	r27, 0x03	; 3
 b78:	0f d0       	rcall	.+30     	; 0xb98 <__ultoa_invert+0x86>
 b7a:	c9 f7       	brne	.-14     	; 0xb6e <__ultoa_invert+0x5c>
 b7c:	f6 cf       	rjmp	.-20     	; 0xb6a <__ultoa_invert+0x58>
 b7e:	46 2f       	mov	r20, r22
 b80:	4f 70       	andi	r20, 0x0F	; 15
 b82:	40 5d       	subi	r20, 0xD0	; 208
 b84:	4a 33       	cpi	r20, 0x3A	; 58
 b86:	18 f0       	brcs	.+6      	; 0xb8e <__ultoa_invert+0x7c>
 b88:	49 5d       	subi	r20, 0xD9	; 217
 b8a:	31 fd       	sbrc	r19, 1
 b8c:	40 52       	subi	r20, 0x20	; 32
 b8e:	41 93       	st	Z+, r20
 b90:	02 d0       	rcall	.+4      	; 0xb96 <__ultoa_invert+0x84>
 b92:	a9 f7       	brne	.-22     	; 0xb7e <__ultoa_invert+0x6c>
 b94:	ea cf       	rjmp	.-44     	; 0xb6a <__ultoa_invert+0x58>
 b96:	b4 e0       	ldi	r27, 0x04	; 4
 b98:	a6 95       	lsr	r26
 b9a:	97 95       	ror	r25
 b9c:	87 95       	ror	r24
 b9e:	77 95       	ror	r23
 ba0:	67 95       	ror	r22
 ba2:	ba 95       	dec	r27
 ba4:	c9 f7       	brne	.-14     	; 0xb98 <__ultoa_invert+0x86>
 ba6:	00 97       	sbiw	r24, 0x00	; 0
 ba8:	61 05       	cpc	r22, r1
 baa:	71 05       	cpc	r23, r1
 bac:	08 95       	ret
 bae:	9b 01       	movw	r18, r22
 bb0:	ac 01       	movw	r20, r24
 bb2:	0a 2e       	mov	r0, r26
 bb4:	06 94       	lsr	r0
 bb6:	57 95       	ror	r21
 bb8:	47 95       	ror	r20
 bba:	37 95       	ror	r19
 bbc:	27 95       	ror	r18
 bbe:	ba 95       	dec	r27
 bc0:	c9 f7       	brne	.-14     	; 0xbb4 <__ultoa_invert+0xa2>
 bc2:	62 0f       	add	r22, r18
 bc4:	73 1f       	adc	r23, r19
 bc6:	84 1f       	adc	r24, r20
 bc8:	95 1f       	adc	r25, r21
 bca:	a0 1d       	adc	r26, r0
 bcc:	08 95       	ret

00000bce <__prologue_saves__>:
 bce:	2f 92       	push	r2
 bd0:	3f 92       	push	r3
 bd2:	4f 92       	push	r4
 bd4:	5f 92       	push	r5
 bd6:	6f 92       	push	r6
 bd8:	7f 92       	push	r7
 bda:	8f 92       	push	r8
 bdc:	9f 92       	push	r9
 bde:	af 92       	push	r10
 be0:	bf 92       	push	r11
 be2:	cf 92       	push	r12
 be4:	df 92       	push	r13
 be6:	ef 92       	push	r14
 be8:	ff 92       	push	r15
 bea:	0f 93       	push	r16
 bec:	1f 93       	push	r17
 bee:	cf 93       	push	r28
 bf0:	df 93       	push	r29
 bf2:	cd b7       	in	r28, 0x3d	; 61
 bf4:	de b7       	in	r29, 0x3e	; 62
 bf6:	ca 1b       	sub	r28, r26
 bf8:	db 0b       	sbc	r29, r27
 bfa:	0f b6       	in	r0, 0x3f	; 63
 bfc:	f8 94       	cli
 bfe:	de bf       	out	0x3e, r29	; 62
 c00:	0f be       	out	0x3f, r0	; 63
 c02:	cd bf       	out	0x3d, r28	; 61
 c04:	09 94       	ijmp

00000c06 <__epilogue_restores__>:
 c06:	2a 88       	ldd	r2, Y+18	; 0x12
 c08:	39 88       	ldd	r3, Y+17	; 0x11
 c0a:	48 88       	ldd	r4, Y+16	; 0x10
 c0c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c0e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c10:	7d 84       	ldd	r7, Y+13	; 0x0d
 c12:	8c 84       	ldd	r8, Y+12	; 0x0c
 c14:	9b 84       	ldd	r9, Y+11	; 0x0b
 c16:	aa 84       	ldd	r10, Y+10	; 0x0a
 c18:	b9 84       	ldd	r11, Y+9	; 0x09
 c1a:	c8 84       	ldd	r12, Y+8	; 0x08
 c1c:	df 80       	ldd	r13, Y+7	; 0x07
 c1e:	ee 80       	ldd	r14, Y+6	; 0x06
 c20:	fd 80       	ldd	r15, Y+5	; 0x05
 c22:	0c 81       	ldd	r16, Y+4	; 0x04
 c24:	1b 81       	ldd	r17, Y+3	; 0x03
 c26:	aa 81       	ldd	r26, Y+2	; 0x02
 c28:	b9 81       	ldd	r27, Y+1	; 0x01
 c2a:	ce 0f       	add	r28, r30
 c2c:	d1 1d       	adc	r29, r1
 c2e:	0f b6       	in	r0, 0x3f	; 63
 c30:	f8 94       	cli
 c32:	de bf       	out	0x3e, r29	; 62
 c34:	0f be       	out	0x3f, r0	; 63
 c36:	cd bf       	out	0x3d, r28	; 61
 c38:	ed 01       	movw	r28, r26
 c3a:	08 95       	ret

00000c3c <_exit>:
 c3c:	f8 94       	cli

00000c3e <__stop_program>:
 c3e:	ff cf       	rjmp	.-2      	; 0xc3e <__stop_program>
